@page "/TaskGenerator"
@using System.IO
@using Tools.CodeGenerator.Tasks.FileSystem.CopyFile
@using Tools.CodeGenerator.Tasks.FileSystem.CreateDirectory
@using Tools.CodeGenerator.Tasks.FileSystem.ReplaceStringInFile

@inject CopyFileFileSystemTask _copyFileFileSystemTask
@inject CreateDirectoryFileSystemTask _createDirectoryFileSystemTask
@inject ReplaceStringInFileFileSystemTask _replaceStringInFileFileSystemTask


<MudTextField @bind-Value="ProjectName" Label="Project Name" Variant="Variant.Outlined" />
<MudTextField @bind-Value="TaskFolderName" Label="TaskFolder Name" Variant="Variant.Outlined" />
<MudTextField @bind-Value="ResourceName" Label="Resource Name" Variant="Variant.Outlined" />
<MudTextField @bind-Value="TaskName" Label="Task Name" Variant="Variant.Outlined" />
<MudText><b>Name:</b> @ProjectName.@TaskFolderName.@ResourceName.@TaskName </MudText>


<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="IncrementCount">Primary</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="IncrementCount">Open Folder</MudButton>


@code {
    public string ProjectName { get; set; } = string.Empty;
    public string TaskFolderName { get; set; } = string.Empty;
    public string ResourceName { get; set; } = string.Empty;
    public string TaskName { get; set; } = string.Empty;
    List<string> templateFiles = new List<string>();
    List<string> NameSpaces = new List<string>();


    void IncrementCount()
    {
        string[] entries = Directory.GetFileSystemEntries(@".\Templates", "*", SearchOption.AllDirectories);
        string[] directories = Directory.EnumerateDirectories(@".\Templates").ToArray();

        string ResouceFolder = $@".\Output\{TaskFolderName}\{ResourceName}";
        string TaskFolder = $@".\Output\{TaskFolderName}\{ResourceName}\{TaskName}";

        string SourceExceptionsFile = $@".\Templates\ApiTask\ResourceFolderTaskFolderException.tpl";
        string SourceInputFile = $@".\Templates\ApiTask\ResourceFolderTaskFolderInput.tpl";
        string SourceResultFile = $@".\Templates\ApiTask\ResourceFolderTaskFolderResult.tpl";
        string SourceRouteFile = $@".\Templates\ApiTask\ResourceFolderTaskFolderRoute.tpl";
        string SourceTaskFile = $@".\Templates\ApiTask\ResourceFolderTaskFolderTask.tpl";

        string DestinationExceptionsFile = $@".\Output\{ProjectName}\{TaskFolderName}\{ResourceName}\{TaskName}\{ResourceName}{TaskName}Exceptions.cs";
        string DestinationInputFile = $@".\Output\{ProjectName}\{TaskFolderName}\{ResourceName}\{TaskName}\{ResourceName}{TaskName}Input.cs";
        string DestinationResultFile = $@".\Output\{ProjectName}\{TaskFolderName}\{ResourceName}\{TaskName}\{ResourceName}{TaskName}Result.cs";
        string DestinationRouteFile = $@".\Output\{ProjectName}\{TaskFolderName}\{ResourceName}\{TaskName}\{ResourceName}{TaskName}Route.cs";
        string DestinationTaskFile = $@".\Output\{ProjectName}\{TaskFolderName}\{ResourceName}\{TaskName}\{ResourceName}{TaskName}Task.cs";

        _createDirectoryFileSystemTask.CreateDirectory(new CreateDirectoryFileSystemInput
            {
                Path = ResouceFolder,
                OverWrite = false
            });

        _createDirectoryFileSystemTask.CreateDirectory(new CreateDirectoryFileSystemInput
            {
                Path = TaskFolder,
                OverWrite = false
            });

        CopyFile(SourceExceptionsFile, DestinationExceptionsFile, true);
        ReplaceText(DestinationExceptionsFile, "{$NameSpace}", $"{ProjectName}.{TaskFolderName}.{ResourceName}.{TaskName}");
        ReplaceText(DestinationExceptionsFile, "{$ClassName}", $"{ResourceName}{TaskName}Exceptions");

        CopyFile(SourceInputFile, DestinationInputFile, true);
        ReplaceText(DestinationInputFile, "{$NameSpace}", $"{ProjectName}.{TaskFolderName}.{ResourceName}.{TaskName}");
        ReplaceText(DestinationInputFile, "{$ClassName}", $"{ResourceName}{TaskName}Input");

        CopyFile(SourceResultFile, DestinationResultFile, true);
        ReplaceText(DestinationResultFile, "{$NameSpace}", $"{ProjectName}.{TaskFolderName}.{ResourceName}.{TaskName}");
        ReplaceText(DestinationResultFile, "{$ClassName}", $"{ResourceName}{TaskName}Result");

        CopyFile(SourceRouteFile, DestinationRouteFile, true);
        ReplaceText(DestinationRouteFile, "{$NameSpace}", $"{ProjectName}.{TaskFolderName}.{ResourceName}.{TaskName}");
        ReplaceText(DestinationRouteFile, "{$ClassName}", $"{ResourceName}{TaskName}Route");

        CopyFile(SourceTaskFile, DestinationTaskFile, true);
        ReplaceText(DestinationTaskFile, "{$NameSpace}", $"{ProjectName}.{TaskFolderName}.{ResourceName}.{TaskName}");
        ReplaceText(DestinationTaskFile, "{$ClassName}", $"{ResourceName}{TaskName}Task");
    }

    void ReplaceText(string path, string stringToFind, string stringToReplace)
    {
        _replaceStringInFileFileSystemTask.ExecuteTask(new ReplaceStringInFileFileSystemInput
            {
                Path = path,
                StringToFind = stringToFind,
                StringToReplace = stringToReplace
            });
    }

    void CopyFile(string sourcePath, string destinationPath, bool overWrite)
    {
        _copyFileFileSystemTask.CopyFile(new CopyFileFileSystemInput
            {
                SourcePath = sourcePath,
                DestiniationPath = destinationPath,
                OverWrite = overWrite
            });
    }
}
